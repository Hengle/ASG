// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class ChunkViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector2 _hexGridPos;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _chunkSize;
    
    public override System.Type ViewModelType {
        get {
            return typeof(ChunkViewModel);
        }
    }
    
    public ChunkViewModel Chunk {
        get {
            return ((ChunkViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ChunkController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        ChunkViewModel chunk = ((ChunkViewModel)(viewModel));
        chunk.hexGridPos = this._hexGridPos;
        chunk.chunkSize = this._chunkSize;
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class WorldManagerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _terrainSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _randomizeSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _pixelsPerUnit;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _pixelToHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _altitudes;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _chunkSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _chunkResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _chunkCollisionResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _terrainWidth;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _terrainHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _detail;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _altitudeVariation;
    
    public override System.Type ViewModelType {
        get {
            return typeof(WorldManagerViewModel);
        }
    }
    
    public WorldManagerViewModel WorldManager {
        get {
            return ((WorldManagerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WorldManagerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        WorldManagerViewModel worldManager = ((WorldManagerViewModel)(viewModel));
        worldManager.terrainSeed = this._terrainSeed;
        worldManager.randomizeSeed = this._randomizeSeed;
        worldManager.pixelsPerUnit = this._pixelsPerUnit;
        worldManager.pixelToHeight = this._pixelToHeight;
        worldManager.altitudes = this._altitudes;
        worldManager.chunkSize = this._chunkSize;
        worldManager.chunkResolution = this._chunkResolution;
        worldManager.chunkCollisionResolution = this._chunkCollisionResolution;
        worldManager.terrainWidth = this._terrainWidth;
        worldManager.terrainHeight = this._terrainHeight;
        worldManager.detail = this._detail;
        worldManager.altitudeVariation = this._altitudeVariation;
    }
    
    public virtual void ExecuteGenerateMap() {
        this.ExecuteCommand(WorldManager.GenerateMap);
    }
    
    public virtual void ExecuteGenerateChunks() {
        this.ExecuteCommand(WorldManager.GenerateChunks);
    }
    
    public virtual void ExecuteGenerateMapDataTexture() {
        this.ExecuteCommand(WorldManager.GenerateMapDataTexture);
    }
    
    public virtual void ExecuteGenerateMapHexTexture() {
        this.ExecuteCommand(WorldManager.GenerateMapHexTexture);
    }
}

public class WorldManagerViewViewBase : WorldManagerViewBase {
    
    [UFToggleGroup("GenerateMap")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateMap = true;
    
    [UFToggleGroup("hexGrid")]
    [UnityEngine.HideInInspector()]
    public bool _BindhexGrid = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WorldManagerController>());
    }
    
    /// Invokes GenerateMapExecuted when the GenerateMap command is executed.
    public virtual void GenerateMapExecuted() {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void hexGridAdded(Hex item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void hexGridRemoved(Hex item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindGenerateMap) {
            this.BindCommandExecuted(WorldManager.GenerateMap, GenerateMapExecuted);
        }
        if (this._BindhexGrid) {
            this.BindCollection(WorldManager._hexGridProperty, hexGridAdded, hexGridRemoved);
        }
    }
}

public partial class WorldManagerView : WorldManagerViewViewBase {
}
