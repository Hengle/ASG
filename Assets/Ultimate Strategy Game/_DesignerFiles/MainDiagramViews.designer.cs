// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class ChunkViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainDataX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainDataY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _WorldPos;
    
    public override System.Type ViewModelType {
        get {
            return typeof(ChunkViewModel);
        }
    }
    
    public ChunkViewModel Chunk {
        get {
            return ((ChunkViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ChunkController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        ChunkViewModel chunk = ((ChunkViewModel)(viewModel));
        chunk.ChunkX = this._ChunkX;
        chunk.ChunkY = this._ChunkY;
        chunk.TerrainDataX = this._TerrainDataX;
        chunk.TerrainDataY = this._TerrainDataY;
        chunk.WorldPos = this._WorldPos;
    }
    
    public virtual void ExecuteGenerateChunk() {
        this.ExecuteCommand(Chunk.GenerateChunk);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class WorldManagerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RandomizeSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsPerUnit;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelToHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Altitudes;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkCollisionResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainWidth;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Detail;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _AltitudeVariation;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _HexagonSide;
    
    public override System.Type ViewModelType {
        get {
            return typeof(WorldManagerViewModel);
        }
    }
    
    public WorldManagerViewModel WorldManager {
        get {
            return ((WorldManagerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WorldManagerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        WorldManagerViewModel worldManager = ((WorldManagerViewModel)(viewModel));
        worldManager.TerrainSeed = this._TerrainSeed;
        worldManager.RandomizeSeed = this._RandomizeSeed;
        worldManager.PixelsPerUnit = this._PixelsPerUnit;
        worldManager.PixelToHeight = this._PixelToHeight;
        worldManager.Altitudes = this._Altitudes;
        worldManager.ChunkSize = this._ChunkSize;
        worldManager.ChunkResolution = this._ChunkResolution;
        worldManager.ChunkCollisionResolution = this._ChunkCollisionResolution;
        worldManager.TerrainWidth = this._TerrainWidth;
        worldManager.TerrainHeight = this._TerrainHeight;
        worldManager.Detail = this._Detail;
        worldManager.AltitudeVariation = this._AltitudeVariation;
        worldManager.HexagonSide = this._HexagonSide;
    }
    
    public virtual void ExecuteGenerateMap() {
        this.ExecuteCommand(WorldManager.GenerateMap);
    }
    
    public virtual void ExecuteGenerateChunks() {
        this.ExecuteCommand(WorldManager.GenerateChunks);
    }
}

public class WorldManagerViewViewBase : WorldManagerViewBase {
    
    [UFToggleGroup("GenerateMap")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateMap = true;
    
    [UFToggleGroup("GenerateChunks")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunks = true;
    
    [UFToggleGroup("Chunks")]
    [UnityEngine.HideInInspector()]
    public bool _BindChunks = true;
    
    [UFGroup("Chunks")]
    [UnityEngine.HideInInspector()]
    public bool _ChunksSceneFirst;
    
    [UFGroup("Chunks")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _ChunksContainer;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WorldManagerController>());
    }
    
    /// Invokes GenerateMapExecuted when the GenerateMap command is executed.
    public virtual void GenerateMapExecuted() {
    }
    
    /// Invokes GenerateChunksExecuted when the GenerateChunks command is executed.
    public virtual void GenerateChunksExecuted() {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateChunksView(ChunkViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ChunksAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void ChunksRemoved(ViewBase item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindGenerateMap) {
            this.BindCommandExecuted(WorldManager.GenerateMap, GenerateMapExecuted);
        }
        if (this._BindGenerateChunks) {
            this.BindCommandExecuted(WorldManager.GenerateChunks, GenerateChunksExecuted);
        }
        if (this._BindChunks) {
            this.BindToViewCollection( WorldManager._ChunksProperty, viewModel=>{ return CreateChunksView(viewModel as ChunkViewModel); }, ChunksAdded, ChunksRemoved, _ChunksContainer, _ChunksSceneFirst);
        }
    }
}

public partial class WorldManagerView : WorldManagerViewViewBase {
}

public class ChunkViewViewBase : ChunkViewBase {
    
    [UFToggleGroup("GenerateChunk")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunk = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ChunkController>());
    }
    
    /// Invokes GenerateChunkExecuted when the GenerateChunk command is executed.
    public virtual void GenerateChunkExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindGenerateChunk) {
            this.BindCommandExecuted(Chunk.GenerateChunk, GenerateChunkExecuted);
        }
    }
}

public partial class ChunkView : ChunkViewViewBase {
}
