// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UniRx;


[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class ChunkViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainDataX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainDataY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Vector3 _WorldPos;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TerrainManager;
    
    public override System.Type ViewModelType {
        get {
            return typeof(ChunkViewModel);
        }
    }
    
    public ChunkViewModel Chunk {
        get {
            return ((ChunkViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ChunkController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        ChunkViewModel chunk = ((ChunkViewModel)(viewModel));
        chunk.ChunkX = this._ChunkX;
        chunk.ChunkY = this._ChunkY;
        chunk.TerrainDataX = this._TerrainDataX;
        chunk.TerrainDataY = this._TerrainDataY;
        chunk.WorldPos = this._WorldPos;
        chunk.TerrainManager = this._TerrainManager == null ? null : this._TerrainManager.ViewModelObject as TerrainManagerViewModel;
    }
    
    public virtual void ExecuteGenerateChunk() {
        this.ExecuteCommand(Chunk.GenerateChunk);
    }
    
    public virtual void ExecuteUpdateChunk() {
        this.ExecuteCommand(Chunk.UpdateChunk);
    }
    
    public virtual void ExecuteSaveChunkHexTexture() {
        this.ExecuteCommand(Chunk.SaveChunkHexTexture);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class TerrainManagerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _RandomizeSeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PixelsPerUnit;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _PixelToHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Altitudes;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _ChunkCollisionResolution;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainWidth;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TerrainHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Detail;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _AltitudeVariation;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HexagonSide;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _RiverCount;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _MinRiverHeight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MinRiverStrength;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MaxRiverStrength;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MinLakeSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MaxLakeSize;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Humidity;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Temperature;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _HumidySpreadDecrease;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _TemperatureSpread;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _HeightTemperature;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AnimationCurve _HumidityTemperature;
    
    public override string DefaultIdentifier {
        get {
            return "TerrainManager";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TerrainManagerViewModel);
        }
    }
    
    public TerrainManagerViewModel TerrainManager {
        get {
            return ((TerrainManagerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TerrainManagerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TerrainManagerViewModel terrainManager = ((TerrainManagerViewModel)(viewModel));
        terrainManager.TerrainSeed = this._TerrainSeed;
        terrainManager.RandomizeSeed = this._RandomizeSeed;
        terrainManager.PixelsPerUnit = this._PixelsPerUnit;
        terrainManager.PixelToHeight = this._PixelToHeight;
        terrainManager.Altitudes = this._Altitudes;
        terrainManager.ChunkSize = this._ChunkSize;
        terrainManager.ChunkResolution = this._ChunkResolution;
        terrainManager.ChunkCollisionResolution = this._ChunkCollisionResolution;
        terrainManager.TerrainWidth = this._TerrainWidth;
        terrainManager.TerrainHeight = this._TerrainHeight;
        terrainManager.Detail = this._Detail;
        terrainManager.AltitudeVariation = this._AltitudeVariation;
        terrainManager.HexagonSide = this._HexagonSide;
        terrainManager.RiverCount = this._RiverCount;
        terrainManager.MinRiverHeight = this._MinRiverHeight;
        terrainManager.MinRiverStrength = this._MinRiverStrength;
        terrainManager.MaxRiverStrength = this._MaxRiverStrength;
        terrainManager.MinLakeSize = this._MinLakeSize;
        terrainManager.MaxLakeSize = this._MaxLakeSize;
        terrainManager.Humidity = this._Humidity;
        terrainManager.Temperature = this._Temperature;
        terrainManager.HumidySpreadDecrease = this._HumidySpreadDecrease;
        terrainManager.TemperatureSpread = this._TemperatureSpread;
        terrainManager.HeightTemperature = this._HeightTemperature;
        terrainManager.HumidityTemperature = this._HumidityTemperature;
    }
    
    public virtual void ExecuteGenerateMap() {
        this.ExecuteCommand(TerrainManager.GenerateMap);
    }
    
    public virtual void ExecuteGenerateChunks() {
        this.ExecuteCommand(TerrainManager.GenerateChunks);
    }
    
    public virtual void ExecuteGetHexAtWorldPos(Vector3 arg) {
        this.ExecuteCommand(TerrainManager.GetHexAtWorldPos, arg);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class WorldManagerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TerrainManager;
    
    public override System.Type ViewModelType {
        get {
            return typeof(WorldManagerViewModel);
        }
    }
    
    public WorldManagerViewModel WorldManager {
        get {
            return ((WorldManagerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<WorldManagerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        WorldManagerViewModel worldManager = ((WorldManagerViewModel)(viewModel));
        worldManager.TerrainManager = this._TerrainManager == null ? null : this._TerrainManager.ViewModelObject as TerrainManagerViewModel;
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class GameLogicViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _PlayerCount;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _TurnCount;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentPlayer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _HumanPlayer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _HumanFaction;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TerrainManager;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public GameState _GameState;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Seasons _Season;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Year;
    
    public override string DefaultIdentifier {
        get {
            return "GameLogic";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameLogicViewModel);
        }
    }
    
    public GameLogicViewModel GameLogic {
        get {
            return ((GameLogicViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameLogicController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        GameLogicViewModel gameLogic = ((GameLogicViewModel)(viewModel));
        gameLogic.PlayerCount = this._PlayerCount;
        gameLogic.TurnCount = this._TurnCount;
        gameLogic.CurrentPlayer = this._CurrentPlayer == null ? null : this._CurrentPlayer.ViewModelObject as PlayerViewModel;
        gameLogic.HumanPlayer = this._HumanPlayer == null ? null : this._HumanPlayer.ViewModelObject as PlayerViewModel;
        gameLogic.HumanFaction = this._HumanFaction == null ? null : this._HumanFaction.ViewModelObject as FactionViewModel;
        gameLogic.TerrainManager = this._TerrainManager == null ? null : this._TerrainManager.ViewModelObject as TerrainManagerViewModel;
        gameLogic.GameState = this._GameState;
        gameLogic.Season = this._Season;
        gameLogic.Year = this._Year;
    }
    
    public virtual void ExecuteStartGame() {
        this.ExecuteCommand(GameLogic.StartGame);
    }
    
    public virtual void ExecuteSetupPlayers() {
        this.ExecuteCommand(GameLogic.SetupPlayers);
    }
    
    public virtual void ExecuteNextTurn() {
        this.ExecuteCommand(GameLogic.NextTurn);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class PlayerViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _IsHuman;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _SelectedUnitStack;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _HoverUnitStack;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _HoverCity;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _SelectedCity;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Faction;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Color _Color;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PlayerViewModel player = ((PlayerViewModel)(viewModel));
        player.Name = this._Name;
        player.IsHuman = this._IsHuman;
        player.SelectedUnitStack = this._SelectedUnitStack == null ? null : this._SelectedUnitStack.ViewModelObject as UnitStackViewModel;
        player.HoverUnitStack = this._HoverUnitStack == null ? null : this._HoverUnitStack.ViewModelObject as UnitStackViewModel;
        player.HoverCity = this._HoverCity == null ? null : this._HoverCity.ViewModelObject as CityViewModel;
        player.SelectedCity = this._SelectedCity == null ? null : this._SelectedCity.ViewModelObject as CityViewModel;
        player.Faction = this._Faction == null ? null : this._Faction.ViewModelObject as FactionViewModel;
        player.Color = this._Color;
    }
    
    public virtual void ExecuteSelectHex(Hex arg) {
        this.ExecuteCommand(Player.SelectHex, arg);
    }
    
    public virtual void ExecuteSelectHexAtPos(Vector3 arg) {
        this.ExecuteCommand(Player.SelectHexAtPos, arg);
    }
    
    public virtual void ExecuteSelectUnitStack(UnitStackViewModel unitStack) {
        this.ExecuteCommand(Player.SelectUnitStack, unitStack);
    }
    
    public virtual void ExecuteSelectUnit(UnitViewModel unit) {
        this.ExecuteCommand(Player.SelectUnit, unit);
    }
    
    public virtual void ExecuteSelectCity(CityViewModel city) {
        this.ExecuteCommand(Player.SelectCity, city);
    }
    
    public virtual void ExecuteSetHoverUnitStack(UnitStackViewModel unitStack) {
        this.ExecuteCommand(Player.SetHoverUnitStack, unitStack);
    }
    
    public virtual void ExecuteSetHoverCity(CityViewModel city) {
        this.ExecuteCommand(Player.SetHoverCity, city);
    }
    
    public virtual void ExecuteMoveUnitStack(UnitStackViewModel unitStack) {
        this.ExecuteCommand(Player.MoveUnitStack, unitStack);
    }
    
    public virtual void ExecuteDeselectAll() {
        this.ExecuteCommand(Player.DeselectAll);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class UnitStackViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Owner;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Boolean _Selected;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _LeadingUnit;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MovePoints;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _MovePointsTotal;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public StackState _StackState;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public PlanedAction _PlannedAction;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _UnitStackDestination;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CityDestination;
    
    public override System.Type ViewModelType {
        get {
            return typeof(UnitStackViewModel);
        }
    }
    
    public UnitStackViewModel UnitStack {
        get {
            return ((UnitStackViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitStackController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        UnitStackViewModel unitStack = ((UnitStackViewModel)(viewModel));
        unitStack.Owner = this._Owner == null ? null : this._Owner.ViewModelObject as PlayerViewModel;
        unitStack.Selected = this._Selected;
        unitStack.LeadingUnit = this._LeadingUnit == null ? null : this._LeadingUnit.ViewModelObject as UnitViewModel;
        unitStack.MovePoints = this._MovePoints;
        unitStack.MovePointsTotal = this._MovePointsTotal;
        unitStack.StackState = this._StackState;
        unitStack.PlannedAction = this._PlannedAction;
        unitStack.UnitStackDestination = this._UnitStackDestination == null ? null : this._UnitStackDestination.ViewModelObject as UnitStackViewModel;
        unitStack.CityDestination = this._CityDestination == null ? null : this._CityDestination.ViewModelObject as CityViewModel;
    }
    
    public virtual void ExecuteNextTurnCalculation() {
        this.ExecuteCommand(UnitStack.NextTurnCalculation);
    }
    
    public virtual void ExecuteAddUnit(UnitViewModel unit) {
        this.ExecuteCommand(UnitStack.AddUnit, unit);
    }
    
    public virtual void ExecuteRemoveUnit(UnitViewModel unit) {
        this.ExecuteCommand(UnitStack.RemoveUnit, unit);
    }
    
    public virtual void ExecutePlanMovement() {
        this.ExecuteCommand(UnitStack.PlanMovement);
    }
    
    public virtual void ExecutePlanUnitDestination() {
        this.ExecuteCommand(UnitStack.PlanUnitDestination);
    }
    
    public virtual void ExecutePlanSettling() {
        this.ExecuteCommand(UnitStack.PlanSettling);
    }
    
    public virtual void ExecuteEvaluateMovementPath(Hex arg) {
        this.ExecuteCommand(UnitStack.EvaluateMovementPath, arg);
    }
    
    public virtual void ExecuteEvaluateSettlingLocation(Hex arg) {
        this.ExecuteCommand(UnitStack.EvaluateSettlingLocation, arg);
    }
    
    public virtual void ExecuteMove(Hex arg) {
        this.ExecuteCommand(UnitStack.Move, arg);
    }
    
    public virtual void ExecuteStopMove() {
        this.ExecuteCommand(UnitStack.StopMove);
    }
    
    public virtual void ExecuteSettle() {
        this.ExecuteCommand(UnitStack.Settle);
    }
    
    public virtual void ExecuteFoundCity(Hex arg) {
        this.ExecuteCommand(UnitStack.FoundCity, arg);
    }
    
    public virtual void ExecuteCancelAction() {
        this.ExecuteCommand(UnitStack.CancelAction);
    }
    
    public virtual void ExecutePlanUnit() {
        this.ExecuteCommand(UnitStack.PlanUnit);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class FactionViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Food;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _Gold;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FactionViewModel);
        }
    }
    
    public FactionViewModel Faction {
        get {
            return ((FactionViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FactionController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        FactionViewModel faction = ((FactionViewModel)(viewModel));
        faction.Name = this._Name;
        faction.Food = this._Food;
        faction.Gold = this._Gold;
    }
    
    public virtual void ExecuteNextTurnCalculation() {
        this.ExecuteCommand(Faction.NextTurnCalculation);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class CityViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Population;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _PopulationGrowth;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Food;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Production;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Knowledge;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _GoldIncome;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Happieness;
    
    public override System.Type ViewModelType {
        get {
            return typeof(CityViewModel);
        }
    }
    
    public CityViewModel City {
        get {
            return ((CityViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        CityViewModel city = ((CityViewModel)(viewModel));
        city.Name = this._Name;
        city.Population = this._Population;
        city.PopulationGrowth = this._PopulationGrowth;
        city.Food = this._Food;
        city.Production = this._Production;
        city.Knowledge = this._Knowledge;
        city.GoldIncome = this._GoldIncome;
        city.Happieness = this._Happieness;
    }
    
    public virtual void ExecuteNextTurnCalculation() {
        this.ExecuteCommand(City.NextTurnCalculation);
    }
    
    public virtual void ExecuteCalcPopulation() {
        this.ExecuteCommand(City.CalcPopulation);
    }
    
    public virtual void ExecuteCalcGoldIncome() {
        this.ExecuteCommand(City.CalcGoldIncome);
    }
    
    public virtual void ExecuteCalcHappieness() {
        this.ExecuteCommand(City.CalcHappieness);
    }
    
    public virtual void ExecuteCalcProduction() {
        this.ExecuteCommand(City.CalcProduction);
    }
    
    public virtual void ExecuteCalcConstruction() {
        this.ExecuteCommand(City.CalcConstruction);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class BuildingViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(BuildingViewModel);
        }
    }
    
    public BuildingViewModel Building {
        get {
            return ((BuildingViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BuildingController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class AIPlayerViewBase : PlayerViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(AIPlayerViewModel);
        }
    }
    
    public AIPlayerViewModel AIPlayer {
        get {
            return ((AIPlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AIPlayerController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
    
    public virtual void ExecuteThink() {
        this.ExecuteCommand(AIPlayer.Think);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class UnitViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _UnitCount;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _UnitCountMax;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Owner;
    
    public override System.Type ViewModelType {
        get {
            return typeof(UnitViewModel);
        }
    }
    
    public UnitViewModel Unit {
        get {
            return ((UnitViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        UnitViewModel unit = ((UnitViewModel)(viewModel));
        unit.Name = this._Name;
        unit.UnitCount = this._UnitCount;
        unit.UnitCountMax = this._UnitCountMax;
        unit.Owner = this._Owner == null ? null : this._Owner.ViewModelObject as PlayerViewModel;
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class SettlerUnitViewBase : UnitViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Population;
    
    public override System.Type ViewModelType {
        get {
            return typeof(SettlerUnitViewModel);
        }
    }
    
    public SettlerUnitViewModel SettlerUnit {
        get {
            return ((SettlerUnitViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<SettlerUnitController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        SettlerUnitViewModel settlerUnit = ((SettlerUnitViewModel)(viewModel));
        settlerUnit.Population = this._Population;
    }
    
    public virtual void ExecuteSettle() {
        this.ExecuteCommand(SettlerUnit.Settle);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class MeleeUnitViewBase : UnitViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(MeleeUnitViewModel);
        }
    }
    
    public MeleeUnitViewModel MeleeUnit {
        get {
            return ((MeleeUnitViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MeleeUnitController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class CharacterViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public String _Name;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Int32 _Age;
    
    public override System.Type ViewModelType {
        get {
            return typeof(CharacterViewModel);
        }
    }
    
    public CharacterViewModel Character {
        get {
            return ((CharacterViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CharacterController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        CharacterViewModel character = ((CharacterViewModel)(viewModel));
        character.Name = this._Name;
        character.Age = this._Age;
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class CharacterUnitViewBase : UnitViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Character;
    
    public override System.Type ViewModelType {
        get {
            return typeof(CharacterUnitViewModel);
        }
    }
    
    public CharacterUnitViewModel CharacterUnit {
        get {
            return ((CharacterUnitViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CharacterUnitController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        CharacterUnitViewModel characterUnit = ((CharacterUnitViewModel)(viewModel));
        characterUnit.Character = this._Character == null ? null : this._Character.ViewModelObject as CharacterViewModel;
    }
}

[DiagramInfoAttribute("Ultimate Strategy Game")]
public abstract class FogOfWarViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TerrainManager;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public Single _HexBorderLegnth;
    
    public override string DefaultIdentifier {
        get {
            return "FogOfWar";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(FogOfWarViewModel);
        }
    }
    
    public FogOfWarViewModel FogOfWar {
        get {
            return ((FogOfWarViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FogOfWarController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        FogOfWarViewModel fogOfWar = ((FogOfWarViewModel)(viewModel));
        fogOfWar.TerrainManager = this._TerrainManager == null ? null : this._TerrainManager.ViewModelObject as TerrainManagerViewModel;
        fogOfWar.HexBorderLegnth = this._HexBorderLegnth;
    }
    
    public virtual void ExecuteUpdateFOW() {
        this.ExecuteCommand(FogOfWar.UpdateFOW);
    }
    
    public virtual void ExecuteUpdateUnitView(UnitStackViewModel unitStack) {
        this.ExecuteCommand(FogOfWar.UpdateUnitView, unitStack);
    }
}

public class ChunkViewViewBase : ChunkViewBase {
    
    [UFToggleGroup("GenerateChunk")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunk = true;
    
    [UFToggleGroup("SaveChunkHexTexture")]
    [UnityEngine.HideInInspector()]
    public bool _BindSaveChunkHexTexture = true;
    
    [UFToggleGroup("UpdateChunk")]
    [UnityEngine.HideInInspector()]
    public bool _BindUpdateChunk = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ChunkController>());
    }
    
    /// Invokes GenerateChunkExecuted when the GenerateChunk command is executed.
    public virtual void GenerateChunkExecuted() {
    }
    
    /// Invokes SaveChunkHexTextureExecuted when the SaveChunkHexTexture command is executed.
    public virtual void SaveChunkHexTextureExecuted() {
    }
    
    /// Invokes UpdateChunkExecuted when the UpdateChunk command is executed.
    public virtual void UpdateChunkExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindGenerateChunk) {
            this.BindCommandExecuted(Chunk.GenerateChunk, GenerateChunkExecuted);
        }
        if (this._BindSaveChunkHexTexture) {
            this.BindCommandExecuted(Chunk.SaveChunkHexTexture, SaveChunkHexTextureExecuted);
        }
        if (this._BindUpdateChunk) {
            this.BindCommandExecuted(Chunk.UpdateChunk, UpdateChunkExecuted);
        }
    }
}

public partial class ChunkView : ChunkViewViewBase {
}

public class GameLogicGUIViewBase : GameLogicViewBase {
    
    [UFToggleGroup("NextTurn")]
    [UnityEngine.HideInInspector()]
    public bool _BindNextTurn = true;
    
    [UFToggleGroup("Season")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SeasonChanged")]
    public bool _BindSeason = true;
    
    [UFToggleGroup("Year")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("YearChanged")]
    public bool _BindYear = true;
    
    [UFToggleGroup("TurnCount")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TurnCountChanged")]
    public bool _BindTurnCount = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameLogicController>());
    }
    
    /// Invokes NextTurnExecuted when the NextTurn command is executed.
    public virtual void NextTurnExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SeasonChanged(Seasons value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void YearChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void TurnCountChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindNextTurn) {
            this.BindCommandExecuted(GameLogic.NextTurn, NextTurnExecuted);
        }
        if (this._BindSeason) {
            this.BindProperty(GameLogic._SeasonProperty, this.SeasonChanged);
        }
        if (this._BindYear) {
            this.BindProperty(GameLogic._YearProperty, this.YearChanged);
        }
        if (this._BindTurnCount) {
            this.BindProperty(GameLogic._TurnCountProperty, this.TurnCountChanged);
        }
    }
}

public partial class GameLogicGUI : GameLogicGUIViewBase {
}

public class PlayerUIViewBase : PlayerViewBase {
    
    [UFToggleGroup("SelectedUnitStack")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnitStack = true;
    
    [UFToggleGroup("SelectedUnits")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnits = true;
    
    [UFToggleGroup("SelectedHex")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SelectedHexChanged")]
    public bool _BindSelectedHex = true;
    
    [UFToggleGroup("HoverUnitStack")]
    [UnityEngine.HideInInspector()]
    public bool _BindHoverUnitStack = true;
    
    [UFToggleGroup("HoverCity")]
    [UnityEngine.HideInInspector()]
    public bool _BindHoverCity = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedUnitStackChanged(UnitStackViewModel value) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsAdded(UnitViewModel item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsRemoved(UnitViewModel item) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedHexChanged(Hex value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HoverUnitStackChanged(UnitStackViewModel value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HoverCityChanged(CityViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelectedUnitStack) {
            this.BindProperty(Player._SelectedUnitStackProperty, this.SelectedUnitStackChanged);
        }
        if (this._BindSelectedUnits) {
            this.BindCollection(Player._SelectedUnitsProperty, SelectedUnitsAdded, SelectedUnitsRemoved);
        }
        if (this._BindSelectedHex) {
            this.BindProperty(Player._SelectedHexProperty, this.SelectedHexChanged);
        }
        if (this._BindHoverUnitStack) {
            this.BindProperty(Player._HoverUnitStackProperty, this.HoverUnitStackChanged);
        }
        if (this._BindHoverCity) {
            this.BindProperty(Player._HoverCityProperty, this.HoverCityChanged);
        }
    }
}

public partial class PlayerUI : PlayerUIViewBase {
}

public class FactionViewViewBase : FactionViewBase {
    
    [UFToggleGroup("Cities")]
    [UnityEngine.HideInInspector()]
    public bool _BindCities = true;
    
    [UFGroup("Cities")]
    [UnityEngine.HideInInspector()]
    public bool _CitiesSceneFirst;
    
    [UFGroup("Cities")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _CitiesContainer;
    
    [UFToggleGroup("UnitStacks")]
    [UnityEngine.HideInInspector()]
    public bool _BindUnitStacks = true;
    
    [UFGroup("UnitStacks")]
    [UnityEngine.HideInInspector()]
    public bool _UnitStacksSceneFirst;
    
    [UFGroup("UnitStacks")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _UnitStacksContainer;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FactionController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateCitiesView(CityViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void CitiesAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void CitiesRemoved(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateUnitStacksView(UnitStackViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void UnitStacksAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void UnitStacksRemoved(ViewBase item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindCities) {
            this.BindToViewCollection( Faction._CitiesProperty, viewModel=>{ return CreateCitiesView(viewModel as CityViewModel); }, CitiesAdded, CitiesRemoved, _CitiesContainer, _CitiesSceneFirst);
        }
        if (this._BindUnitStacks) {
            this.BindToViewCollection( Faction._UnitStacksProperty, viewModel=>{ return CreateUnitStacksView(viewModel as UnitStackViewModel); }, UnitStacksAdded, UnitStacksRemoved, _UnitStacksContainer, _UnitStacksSceneFirst);
        }
    }
}

public partial class FactionView : FactionViewViewBase {
}

public class GameLogicViewViewBase : GameLogicViewBase {
    
    [UFToggleGroup("Players")]
    [UnityEngine.HideInInspector()]
    public bool _BindPlayers = true;
    
    [UFGroup("Players")]
    [UnityEngine.HideInInspector()]
    public bool _PlayersSceneFirst;
    
    [UFGroup("Players")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _PlayersContainer;
    
    [UFToggleGroup("Factions")]
    [UnityEngine.HideInInspector()]
    public bool _BindFactions = true;
    
    [UFGroup("Factions")]
    [UnityEngine.HideInInspector()]
    public bool _FactionsSceneFirst;
    
    [UFGroup("Factions")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _FactionsContainer;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameLogicController>());
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreatePlayersView(PlayerViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void PlayersAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void PlayersRemoved(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual ViewBase CreateFactionsView(FactionViewModel item) {
        return this.InstantiateView(item);
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void FactionsAdded(ViewBase item) {
    }
    
    /// This binding will add or remove views based on an element/viewmodel collection.
    public virtual void FactionsRemoved(ViewBase item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindPlayers) {
            this.BindToViewCollection( GameLogic._PlayersProperty, viewModel=>{ return CreatePlayersView(viewModel as PlayerViewModel); }, PlayersAdded, PlayersRemoved, _PlayersContainer, _PlayersSceneFirst);
        }
        if (this._BindFactions) {
            this.BindToViewCollection( GameLogic._FactionsProperty, viewModel=>{ return CreateFactionsView(viewModel as FactionViewModel); }, FactionsAdded, FactionsRemoved, _FactionsContainer, _FactionsSceneFirst);
        }
    }
}

public partial class GameLogicView : GameLogicViewViewBase {
}

public class CityViewViewBase : CityViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class CityView : CityViewViewBase {
}

public class UnitStackUnitsUIViewBase : PlayerViewBase {
    
    [UFToggleGroup("SelectedUnitStack")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnitStack = true;
    
    [UFToggleGroup("SelectedUnits")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnits = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedUnitStackChanged(UnitStackViewModel value) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsAdded(UnitViewModel item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsRemoved(UnitViewModel item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelectedUnitStack) {
            this.BindProperty(Player._SelectedUnitStackProperty, this.SelectedUnitStackChanged);
        }
        if (this._BindSelectedUnits) {
            this.BindCollection(Player._SelectedUnitsProperty, SelectedUnitsAdded, SelectedUnitsRemoved);
        }
    }
}

public partial class UnitStackUnitsUI : UnitStackUnitsUIViewBase {
}

public class UnitSlotViewBase : UnitViewBase {
    
    [UFToggleGroup("UnitCount")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("UnitCountChanged")]
    public bool _BindUnitCount = true;
    
    [UFToggleGroup("UnitCountMax")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("UnitCountMaxChanged")]
    public bool _BindUnitCountMax = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void UnitCountChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void UnitCountMaxChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindUnitCount) {
            this.BindProperty(Unit._UnitCountProperty, this.UnitCountChanged);
        }
        if (this._BindUnitCountMax) {
            this.BindProperty(Unit._UnitCountMaxProperty, this.UnitCountMaxChanged);
        }
    }
}

public partial class UnitSlot : UnitSlotViewBase {
}

public class PlayerViewViewBase : PlayerViewBase {
    
    [UFToggleGroup("SelectedHex")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SelectedHexChanged")]
    public bool _BindSelectedHex = true;
    
    [UFToggleGroup("SelectedUnitStack")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnitStack = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedHexChanged(Hex value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedUnitStackChanged(UnitStackViewModel value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelectedHex) {
            this.BindProperty(Player._SelectedHexProperty, this.SelectedHexChanged);
        }
        if (this._BindSelectedUnitStack) {
            this.BindProperty(Player._SelectedUnitStackProperty, this.SelectedUnitStackChanged);
        }
    }
}

public partial class PlayerView : PlayerViewViewBase {
}

public class UnitStackViewViewBase : UnitStackViewBase {
    
    private IDisposable _WorldPosDisposable;
    
    [UFToggleGroup("LeadingUnit")]
    [UnityEngine.HideInInspector()]
    public bool _BindLeadingUnit = true;
    
    [UFToggleGroup("Move")]
    [UnityEngine.HideInInspector()]
    public bool _BindMove = true;
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState = true;
    
    [UFToggleGroup("Selected")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SelectedChanged")]
    public bool _BindSelected = true;
    
    [UFToggleGroup("Settle")]
    [UnityEngine.HideInInspector()]
    public bool _BindSettle = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitStackController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void LeadingUnitChanged(UnitViewModel value) {
    }
    
    /// Invokes MoveExecuted when the Move command is executed.
    public virtual void MoveExecuted() {
    }
    
    /// Subscribes to the state machine property and executes a method for each state.
    public virtual void StateChanged(Invert.StateMachine.State value) {
        if (value is Idling) {
            this.OnIdling();
        }
        if (value is Moving) {
            this.OnMoving();
        }
    }
    
    public virtual void OnIdling() {
    }
    
    public virtual void OnMoving() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedChanged(Boolean value) {
    }
    
    /// Invokes SettleExecuted when the Settle command is executed.
    public virtual void SettleExecuted() {
    }
    
    public virtual void ResetWorldPos() {
        if (_WorldPosDisposable != null) _WorldPosDisposable.Dispose();
        _WorldPosDisposable = GetWorldPosObservable().Subscribe(UnitStack._WorldPosProperty).DisposeWith(this);
    }
    
    protected virtual Vector3 CalculateWorldPos() {
        return default(Vector3);
    }
    
    protected virtual UniRx.IObservable<Vector3> GetWorldPosObservable() {
        return this.UpdateAsObservable().Select(p => CalculateWorldPos());
    }
    
    public override void Bind() {
        base.Bind();
        ResetWorldPos();
        if (this._BindLeadingUnit) {
            this.BindProperty(UnitStack._LeadingUnitProperty, this.LeadingUnitChanged);
        }
        if (this._BindMove) {
            this.BindCommandExecuted(UnitStack.Move, MoveExecuted);
        }
        if (this._BindState) {
            this.BindProperty(UnitStack._StateProperty, this.StateChanged);
        }
        if (this._BindSelected) {
            this.BindProperty(UnitStack._SelectedProperty, this.SelectedChanged);
        }
        if (this._BindSettle) {
            this.BindCommandExecuted(UnitStack.Settle, SettleExecuted);
        }
    }
}

public partial class UnitStackView : UnitStackViewViewBase {
}

public class UnitStackFlagViewViewBase : UnitStackViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitStackController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class UnitStackFlagView : UnitStackFlagViewViewBase {
}

public class UnitStackActionsUIViewBase : PlayerViewBase {
    
    [UFToggleGroup("SelectedUnitStack")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnitStack = true;
    
    [UFToggleGroup("SelectedUnits")]
    [UnityEngine.HideInInspector()]
    public bool _BindSelectedUnits = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedUnitStackChanged(UnitStackViewModel value) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsAdded(UnitViewModel item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void SelectedUnitsRemoved(UnitViewModel item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelectedUnitStack) {
            this.BindProperty(Player._SelectedUnitStackProperty, this.SelectedUnitStackChanged);
        }
        if (this._BindSelectedUnits) {
            this.BindCollection(Player._SelectedUnitsProperty, SelectedUnitsAdded, SelectedUnitsRemoved);
        }
    }
}

public partial class UnitStackActionsUI : UnitStackActionsUIViewBase {
}

public class UnitStackActionsViewViewBase : UnitStackViewBase {
    
    [UFToggleGroup("Selected")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SelectedChanged")]
    public bool _BindSelected = true;
    
    [UFToggleGroup("StackState")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StackStateChanged")]
    public bool _BindStackState = true;
    
    [UFToggleGroup("PlannedAction")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PlannedActionChanged")]
    public bool _BindPlannedAction = true;
    
    [UFToggleGroup("EvaluateSettlingLocation")]
    [UnityEngine.HideInInspector()]
    public bool _BindEvaluateSettlingLocation = true;
    
    [UFToggleGroup("PlannedSettlingLocation")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PlannedSettlingLocationChanged")]
    public bool _BindPlannedSettlingLocation = true;
    
    [UFToggleGroup("SettlingLocation")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SettlingLocationChanged")]
    public bool _BindSettlingLocation = true;
    
    [UFToggleGroup("Path")]
    [UnityEngine.HideInInspector()]
    public bool _BindPath = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<UnitStackController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SelectedChanged(Boolean value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void StackStateChanged(StackState value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PlannedActionChanged(PlanedAction value) {
    }
    
    /// Invokes EvaluateSettlingLocationExecuted when the EvaluateSettlingLocation command is executed.
    public virtual void EvaluateSettlingLocationExecuted() {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PlannedSettlingLocationChanged(Hex value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void SettlingLocationChanged(Hex value) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void PathAdded(Hex item) {
    }
    
    /// Subscribes to collection modifications.  Add & Remove methods are invoked for each modification.
    public virtual void PathRemoved(Hex item) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelected) {
            this.BindProperty(UnitStack._SelectedProperty, this.SelectedChanged);
        }
        if (this._BindStackState) {
            this.BindProperty(UnitStack._StackStateProperty, this.StackStateChanged);
        }
        if (this._BindPlannedAction) {
            this.BindProperty(UnitStack._PlannedActionProperty, this.PlannedActionChanged);
        }
        if (this._BindEvaluateSettlingLocation) {
            this.BindCommandExecuted(UnitStack.EvaluateSettlingLocation, EvaluateSettlingLocationExecuted);
        }
        if (this._BindPlannedSettlingLocation) {
            this.BindProperty(UnitStack._PlannedSettlingLocationProperty, this.PlannedSettlingLocationChanged);
        }
        if (this._BindSettlingLocation) {
            this.BindProperty(UnitStack._SettlingLocationProperty, this.SettlingLocationChanged);
        }
        if (this._BindPath) {
            this.BindCollection(UnitStack._PathProperty, PathAdded, PathRemoved);
        }
    }
}

public partial class UnitStackActionsView : UnitStackActionsViewViewBase {
}

public class CityFlagViewViewBase : CityViewBase {
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityController>());
    }
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class CityFlagView : CityFlagViewViewBase {
}

public class CityUIViewViewBase : CityViewBase {
    
    [UFToggleGroup("Name")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("NameChanged")]
    public bool _BindName = true;
    
    [UFToggleGroup("Happieness")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("HappienessChanged")]
    public bool _BindHappieness = true;
    
    [UFToggleGroup("PopulationGrowth")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PopulationGrowthChanged")]
    public bool _BindPopulationGrowth = true;
    
    [UFToggleGroup("Population")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PopulationChanged")]
    public bool _BindPopulation = true;
    
    [UFToggleGroup("GoldIncome")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GoldIncomeChanged")]
    public bool _BindGoldIncome = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CityController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void NameChanged(String value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void HappienessChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PopulationGrowthChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void PopulationChanged(Int32 value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void GoldIncomeChanged(Int32 value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindName) {
            this.BindProperty(City._NameProperty, this.NameChanged);
        }
        if (this._BindHappieness) {
            this.BindProperty(City._HappienessProperty, this.HappienessChanged);
        }
        if (this._BindPopulationGrowth) {
            this.BindProperty(City._PopulationGrowthProperty, this.PopulationGrowthChanged);
        }
        if (this._BindPopulation) {
            this.BindProperty(City._PopulationProperty, this.PopulationChanged);
        }
        if (this._BindGoldIncome) {
            this.BindProperty(City._GoldIncomeProperty, this.GoldIncomeChanged);
        }
    }
}

public partial class CityUIView : CityUIViewViewBase {
}

public class HumanFactionUIViewViewBase : FactionViewBase {
    
    [UFToggleGroup("Food")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("FoodChanged")]
    public bool _BindFood = true;
    
    [UFToggleGroup("Gold")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GoldChanged")]
    public bool _BindGold = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FactionController>());
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void FoodChanged(Single value) {
    }
    
    /// Subscribes to the property and is notified anytime the value changes.
    public virtual void GoldChanged(Single value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindFood) {
            this.BindProperty(Faction._FoodProperty, this.FoodChanged);
        }
        if (this._BindGold) {
            this.BindProperty(Faction._GoldProperty, this.GoldChanged);
        }
    }
}

public partial class HumanFactionUIView : HumanFactionUIViewViewBase {
}

public class FogOfWarViewViewBase : FogOfWarViewBase {
    
    [UFToggleGroup("UpdateFOW")]
    [UnityEngine.HideInInspector()]
    public bool _BindUpdateFOW = true;
    
    [UFToggleGroup("UpdateUnitView")]
    [UnityEngine.HideInInspector()]
    public bool _BindUpdateUnitView = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FogOfWarController>());
    }
    
    /// Invokes UpdateFOWExecuted when the UpdateFOW command is executed.
    public virtual void UpdateFOWExecuted() {
    }
    
    /// Invokes UpdateUnitViewExecuted when the UpdateUnitView command is executed.
    public virtual void UpdateUnitViewExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindUpdateFOW) {
            this.BindCommandExecuted(FogOfWar.UpdateFOW, UpdateFOWExecuted);
        }
        if (this._BindUpdateUnitView) {
            this.BindCommandExecuted(FogOfWar.UpdateUnitView, UpdateUnitViewExecuted);
        }
    }
}

public partial class FogOfWarView : FogOfWarViewViewBase {
}

public class TerrainManagerViewViewBase : TerrainManagerViewBase {
    
    [UFToggleGroup("GenerateMap")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateMap = true;
    
    [UFToggleGroup("GenerateChunks")]
    [UnityEngine.HideInInspector()]
    public bool _BindGenerateChunks = true;
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TerrainManagerController>());
    }
    
    /// Invokes GenerateMapExecuted when the GenerateMap command is executed.
    public virtual void GenerateMapExecuted() {
    }
    
    /// Invokes GenerateChunksExecuted when the GenerateChunks command is executed.
    public virtual void GenerateChunksExecuted() {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindGenerateMap) {
            this.BindCommandExecuted(TerrainManager.GenerateMap, GenerateMapExecuted);
        }
        if (this._BindGenerateChunks) {
            this.BindCommandExecuted(TerrainManager.GenerateChunks, GenerateChunksExecuted);
        }
    }
}

public partial class TerrainManagerView : TerrainManagerViewViewBase {
}
