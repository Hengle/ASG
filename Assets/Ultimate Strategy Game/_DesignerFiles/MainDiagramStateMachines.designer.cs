// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class UnitStackStateBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _Idle;
    
    private StateMachineTrigger _Move;
    
    private StateMachineTrigger _CancelMove;
    
    private StateMachineTrigger _MovementCompleted;
    
    private Idling _Idling;
    
    private Moving _Moving;
    
    public UnitStackStateBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger Idle {
        get {
            if ((this._Idle == null)) {
                this._Idle = new StateMachineTrigger(this, "Idle");
            }
            return this._Idle;
        }
    }
    
    public virtual StateMachineTrigger Move {
        get {
            if ((this._Move == null)) {
                this._Move = new StateMachineTrigger(this, "Move");
            }
            return this._Move;
        }
    }
    
    public virtual StateMachineTrigger CancelMove {
        get {
            if ((this._CancelMove == null)) {
                this._CancelMove = new StateMachineTrigger(this, "CancelMove");
            }
            return this._CancelMove;
        }
    }
    
    public virtual StateMachineTrigger MovementCompleted {
        get {
            if ((this._MovementCompleted == null)) {
                this._MovementCompleted = new StateMachineTrigger(this, "MovementCompleted");
            }
            return this._MovementCompleted;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Idling;
        }
    }
    
    public virtual Idling Idling {
        get {
            if ((this._Idling == null)) {
                this._Idling = new Idling();
            }
            return this._Idling;
        }
    }
    
    public virtual Moving Moving {
        get {
            if ((this._Moving == null)) {
                this._Moving = new Moving();
            }
            return this._Moving;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Idling.StateMachine = this;
        Idling.Move = new StateTransition("Move", Idling,Moving);
        Idling.AddTrigger(Move, Idling.Move);
        states.Add(Idling);
        this.Moving.StateMachine = this;
        Moving.CancelMove = new StateTransition("CancelMove", Moving,Idling);
        Moving.MovementCompleted = new StateTransition("MovementCompleted", Moving,Idling);
        Moving.AddTrigger(CancelMove, Moving.CancelMove);
        Moving.AddTrigger(MovementCompleted, Moving.MovementCompleted);
        states.Add(Moving);
    }
}

public class Idling : Invert.StateMachine.State {
    
    private StateTransition _Move;
    
    public virtual StateTransition Move {
        get {
            return this._Move;
        }
        set {
            _Move = value;
        }
    }
    
    public override string Name {
        get {
            return "Idling";
        }
    }
    
    private void MoveTransition() {
        this.Transition(this.Move);
    }
}

public class Moving : Invert.StateMachine.State {
    
    private StateTransition _CancelMove;
    
    private StateTransition _MovementCompleted;
    
    public virtual StateTransition CancelMove {
        get {
            return this._CancelMove;
        }
        set {
            _CancelMove = value;
        }
    }
    
    public virtual StateTransition MovementCompleted {
        get {
            return this._MovementCompleted;
        }
        set {
            _MovementCompleted = value;
        }
    }
    
    public override string Name {
        get {
            return "Moving";
        }
    }
    
    private void CancelMoveTransition() {
        this.Transition(this.CancelMove);
    }
    
    private void MovementCompletedTransition() {
        this.Transition(this.MovementCompleted);
    }
}
