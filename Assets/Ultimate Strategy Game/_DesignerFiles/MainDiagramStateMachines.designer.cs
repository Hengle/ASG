// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class UnitStateBase : Invert.StateMachine.StateMachine {
    
    private StateMachineTrigger _StartIdle;

    private StateMachineTrigger _StartMoving;

    private StateMachineTrigger _StartDefending;
    
    private Idle _Idle;
    
    private Moving _Moving;
    
    private Defending _Defending;
    
    public UnitStateBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual StateMachineTrigger StartIdle {
        get {
            if ((this._StartIdle == null))
            {
                this._StartIdle = new StateMachineTrigger(this, "Idle");
            }
            return this._StartIdle;
        }
    }
    
    public virtual StateMachineTrigger StartMoving {
        get {
            if ((this._StartMoving == null))
            {
                this._StartMoving = new StateMachineTrigger(this, "Moving");
            }
            return this._StartMoving;
        }
    }
    
    public virtual StateMachineTrigger StartDefending {
        get {
            if ((this._StartDefending == null))
            {
                this._StartDefending = new StateMachineTrigger(this, "Defending");
            }
            return this._StartDefending;
        }
    }
    
    public override Invert.StateMachine.State StartState {
        get {
            return this.Idle;
        }
    }
    
    public virtual Idle Idle {
        get {
            if ((this._Idle == null)) {
                this._Idle = new Idle();
            }
            return this._Idle;
        }
    }
    
    public virtual Moving Moving {
        get {
            if ((this._Moving == null)) {
                this._Moving = new Moving();
            }
            return this._Moving;
        }
    }
    
    public virtual Defending Defending {
        get {
            if ((this._Defending == null)) {
                this._Defending = new Defending();
            }
            return this._Defending;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Idle.StateMachine = this;
        Idle.Moving = new StateTransition("Moving", Idle,Moving);
        Idle.Defending = new StateTransition("Defending", Idle,Defending);
        Idle.AddTrigger(StartMoving, Idle.Moving);
        Idle.AddTrigger(StartDefending, Idle.Defending);
        states.Add(Idle);
        this.Moving.StateMachine = this;
        Moving.Idle = new StateTransition("Idle", Moving,Idle);
        Moving.AddTrigger(StartIdle, Moving.Idle);
        states.Add(Moving);
        this.Defending.StateMachine = this;
        Defending.Moving = new StateTransition("Moving", Defending,Moving);
        //Defending.AddTrigger(StartIdle, Defending.Idle);
        //Defending.AddTrigger(StartMoving, Defending.Moving);
        states.Add(Defending);
    }
}

public class Idle : Invert.StateMachine.State {
    
    private StateTransition _Moving;
    
    private StateTransition _Defending;
    
    public virtual StateTransition Moving {
        get {
            return this._Moving;
        }
        set {
            _Moving = value;
        }
    }
    
    public virtual StateTransition Defending {
        get {
            return this._Defending;
        }
        set {
            _Defending = value;
        }
    }
    
    public override string Name {
        get {
            return "Idle";
        }
    }
    
    private void MovingTransition() {
        this.Transition(this.Moving);
    }
    
    private void DefendingTransition() {
        this.Transition(this.Defending);
    }
}

public class Moving : Invert.StateMachine.State {
    
    private StateTransition _Idle;
    
    public virtual StateTransition Idle {
        get {
            return this._Idle;
        }
        set {
            _Idle = value;
        }
    }
    
    public override string Name {
        get {
            return "Moving";
        }
    }
    
    private void IdleTransition() {
        this.Transition(this.Idle);
    }
}

public class Defending : Invert.StateMachine.State {
    
    private StateTransition _Moving;
    
    public virtual StateTransition Moving {
        get {
            return this._Moving;
        }
        set {
            _Moving = value;
        }
    }
    
    public override string Name {
        get {
            return "Defending";
        }
    }
    
    private void MovingTransition() {
        this.Transition(this.Moving);
    }
}
